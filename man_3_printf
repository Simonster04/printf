.TH _PRINTF 3 "2019-10-29" "GNU" "Linux Programmer's Manual"
.SH NAME
.B _printf
- formatted output conversion
.SH SYNOPSIS
#include "holberton.h"

int printf(const char *format, ...);
.SH DESCRIPTION
The _printf() function produce output according to a format as described below. The function _printf() writes output to stdout, the standard output stream. This function writes the output under the control of a format  string  that  specifies  how  subsequent arguments (or arguments accessed via the variable-length argument facilities of stdarg(3)) are converted for output. 
.SH		Return value 
Upon successful return, this function returns the number of characters printed (excluding the null byte used to end output to strings). 
If an output error is encountered, a negative value is returned.
.SH		Format of the format string
The format string is a constant character string, beginning and ending in its initial shift state, if any.  The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the character %, and ends with a conversion specifier. In between there may be (in this order) zero or more flags, an optional minimum field width, an optional precision and an optional length modifier.
.SH		The flag characters
The character % is followed by zero or more of the following flags:
.SH		#
The value should be converted to an "alternate form". For o conversions, the first character of the output string is made zero (by prefixing a 0 if it was not zero already). For x and X conversions, a nonzero result has the string "0x" (or "0X" for X conversions) prepended to it. For a, A, e, E, f, F, g, and G conversions, the result will always contain a decimal point, even if no digits follow it (normally, a decimal point appears in the results of those conversions only if a digit follows). For g and G conversions, trailing zeros are not removed from the result as they would otherwise be. For other conversions, the result is undefined.
.SH		0
The value should be zero padded. For d, i, o, u, x, X, a, A, e, E, f, F, g, and G conversions, the converted value is padded on the left with zeros rather than blanks. If the 0 and - flags both appear, the 0 flag is ignored. If a precision is given with a numeric conversion (d, i, o, u, x, and X), the 0 flag is ignored. For other conversions, the behavior is undefined.
.SH		-
The converted value is to be left adjusted on the field boundary. (The default is right justification.) Except for n conversions, the converted value is padded on the right with blanks, rather than on the left with blanks or zeros. A - overrides a 0 if both are given.
.SH		''
(a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.
.SH		+
A sign (+ or -) should always be placed before a number produced by a signed conversion. By default a sign is used only for negative numbers. A + overrides a space if both are used.
.SH		The field width
An optional decimal digit string (with nonzero first digit) specifying a minimum field width. If the converted value has fewer characters than the field width, it will be padded with spaces on the left (or right, if the left-adjustment flag has been given). Instead of a decimal digit string one may write "*" or "*m$" (for some decimal integer m) to specify that the field width is given in the next argument, or in the m-th argument, respectively, which must be of type int. A negative field width is taken as a '-' flag followed by a positive field width. In no case does a nonexistent or small field width cause truncation of a field; if the result of a conversion is wider than the field width, the field is expanded to contain the conversion result.
.SH		The conversion specifier
A character that specifies the type of conversion to be applied. The conversion specifiers and their meanings are:
.SH		d, i
The int argument is converted to signed decimal notation. The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros. The default precision is 1. When 0 is printed with an explicit precision 0, the output is empty.
.SH		c
If no l modifier is present, the int argument is converted to an unsigned char, and the resulting character is written. If an l modifier is present, the wint_t (wide character) argument is converted to a multibyte sequence by a call to the wcrtomb(3) function, with a conversion state starting in the initial state, and the resulting multibyte string is written.
.SH		s
If no l modifier is present: The const char * argument is expected to be a pointer to an array of character type (pointer to a string). Characters from the array are written up to (but not including) a terminating null byte ('\0'); if a precision is specified, no more than the number specified are written. If a precision is given, no null byte need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a terminating null byte.
.SH		C
(Not in C99, but in SUSv2.) Synonym for lc. Don't use.
.SH		S
(Not in C99, but in SUSv2.) Synonym for ls. Don't use.
.SH		%
A '%' is written. No argument is converted. The complete conversion specification is '%%'.
.SH SEE ALSO
.I printf(1).
.SH BUGS
Code such as _printf(foo); often indicates a bug, since foo may contain a % character. If foo comes from untrusted user input, it may contain %n, causing the printf() call to write to memory and creating a security hole.
.SH AUTHOR
Alejandro Arbelaez and Simon Parra from Holberton School.

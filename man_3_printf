.TH _PRINTF 3 "2019-10-29" "GNU" "Linux Programmer's Manual"
.SH NAME
.B _printf
- formatted output conversion
.SH SYNOPSIS
#include "holberton.h"

int printf(const char *format, ...);
.SH DESCRIPTION
The _printf() function produce output according to a format as described below. The function _printf() writes output to stdout, the standard output stream. This function writes the output under the control of a format  string  that  specifies  how  subsequent arguments (or arguments accessed via the variable-length argument facilities of stdarg(3)) are converted for output. 
.SH		Return value 
Upon successful return, this function returns the number of characters printed (excluding the null byte used to end output to strings). 
If an output error is encountered, a negative value is returned.
.SH		Format of the format string
The format string is a constant character string, beginning and ending in its initial shift state, if any.  The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the character %, and ends with a conversion specifier. In between there may be (in this order) zero or more flags, an optional minimum field width, an optional precision and an optional length modifier.
.SH OPTIONS
.B holberton
does not take any options. However, you can supply studentname.
.SH SEE ALSO
.I printf(1), asprintf(3), dprintf(3), scanf(3), setlocale(3), wcrtomb(3), wprintf(3), locale(5)
.SH BUGS
Code such as printf(foo); often indicates a bug, since foo may contain a % character. If foo comes from untrusted user input, it may contain %n, causing the printf() call to write to memory and creating a security hole.
.SH AUTHOR
Alejandro Arbelaez and Simon Parra from Holberton School.
